1.1
def cubic_sum(a, b, c):

    return a**3 + b**3 + c**3


1.2
def power_of_sum(a, b, c):

    return (a + b)**c


1.3
def delta(a, b, c):

    return b**2 - 4 * a * c


1.4
def profit(x):
    return -0.1 * x**2 + 231 * x - 1500


1.5
def product_and_price(a, b):
    return a + ' was purchased for ' + b


1.6
def euc_distance(x, y, z):
    return (x ** 2 + y ** 2 + z ** 2) ** (1/2)


1.7
def cuboid(a, b, h):
    pole = 2 * (a * b + a * h + b * h)
    volume = a * b * h
    return(pole, volume)


1.8
def insert_at(a, b, c):
    return a[0:c] + b + a[c:]


2.1
def even_odd(x):

    if x % 2 == 0:
        return "even"
    else:
        return "odd"


2.2
def delta_int(a, b, c):
    delta = b ** 2 - 4 * a * c
    if delta == 0:
        return 'Delta is zero'
    if delta > 0:
        return 'Delta is positive'
    if delta < 0:
        return 'Delta is negative'


2.3
def in_range(a, b, c):
    if a >= b and a <= c:
        return 'True'
    else:
        return 'False'


2.4
def divisibility(a, b):
    if a % b == 0:
        return 'True'
    else:
        return 'False'


2.5
def max_from_3(a, b, c):
    return max(a, b, c)


2.6
def calculate(a, b, c):

    if c == 'sum':
        return a + b


    if c == 'multi':
        return a * b


    if c  == 'div':

        return a / b


    if c == 'pow':
        return a ** b


2.7
def prefix_slice(a, b):

    prefix_lenght = len(b)

    prefix_loc = prefix_lenght

    if a[0:prefix_loc] == b:
        return 'True'
    else:
        return 'False'


2.8
def leap_check(x):
    if x % 4 == 0 and x % 100 != 0 or x % 400 == 0:
        return 'True'
    else:
        return 'False'



3.0
def factorial(n):
    if n < 0:
        return 'Error'
    elif n == 0 or n == 1:
        return 1
    else:
        result = 1
        for i in range(2, n + 1):
            wynik *= i
        return wynik


3.1
def factorial(n):
    if n < 0:
        return 'Error'
    elif n == 0 or n == 1:
        return 1
    else:
        result = 1
        for i in range(2, n + 1):
            wynik *= i
        return wynik


3.2
def divisors(x):
    for i in range(1, x + 1):
        if x % i == 0:
            print(i)


3.3
def prefix_for(s1, s2):

    if len(s2) > len(s1):
        return False
    
    for i in range(len(s2)):
        if s1[i] != s2[i]:
            return False
    
    return True


3.4
def str_reverse(s):

    reversed_s = ""
    for char in s:
        reversed_s = char + reversed_s
    return reversed_s


3.5
def divisible_from_range(n, a, b):

    if n == 0:
        raise ValueError("Dzielnik n nie może być równy 0")
    
    for i in range(a, b + 1):
        if i % n == 0:
            print(i)

3.6
def rectangle(r, c): 
    for _ in range(r):
        print('*' * c)


3.7
def triangle(h):   
    for i in range(h):
        stars = 2 * i + 1
        spaces = h - i - 1
        print(' ' * spaces + '*' * stars)


3.8
def del_all(str1, str2):
        return str1.replace(str2, '')


4.1
def product(numbers):
    result = 1.0
    for number in numbers:
        result *= number
    
    return result


4.2
def product(lista):
    iloczyn = 1
    for liczba in lista:
        if liczba != 0:
            iloczyn *= 1/liczba
        else:
            return "Lista zawiera zero, nie można obliczyć odwrotności."
    return iloczyn


4.3
def duplicates(lista):
    duplikaty = []
    for element in lista:
        if lista.count(element) > 1 and element not in duplikaty:
            duplikaty.append(element)
    return duplikaty


4.4
def extend_list(lista, n):
    if isinstance(n, int) and n > 0:
        return lista * n


4.5
def odd_numbers(lista):
    return [float(num) for num in lista] 


4.6
def list_reverse(lista):
    return lista[::-1]


4.7
def concatenate(lista):
    return ' '.join(lista)


4.8
def shortest_string(lista):
        return min(lista, key=len)


5.1
def str_lengths(lista):
    return {str: len(str) for str in lista}


5.2
def even_parity(lista):
    return {liczba: 'even' if liczba % 2 == 0 else 'odd' for liczba in lista}


5.3
def sum_of_values(dictionary):
    return sum(dictionary.values())


5.4
def min_from_dict(dictionary):
    return min(dictionary, key=dictionary.get)


5.5
def avg_from_dict(dictionary):
    return sum(dictionary.values()) / len(dictionary)


5.6
def dict_val_to_list(dictionary):
    return list(dictionary.values())


5.7
def create_dict(keys, values):
    return dict(zip(keys, values))


5.8
def sum_dict(dict1, dict2):
    return {key: dict1.get(key, 0) + dict2.get(key, 0) for key in set(dict1) | set(dict2)}
